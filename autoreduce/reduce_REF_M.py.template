#!/usr/bin/env python
import logging
import sys, os

class ContextFilter(logging.Filter):
    """ Simple log filter to take out non-Mantid logs from .err file """

    def filter(self, record):
        filtered_logs = ["Optimal parameters not found"]
        msg = record.getMessage()
        if record.levelname == 'WARNING':
            return 0
        for item in filtered_logs:
            if item in msg:
                return 0
        return 1

logger = logging.getLogger()
f = ContextFilter()
logger.addFilter(f)

from mr_reduction import mr_reduction as refm
from mr_reduction import mr_translate

if __name__=="__main__":
    """
    Options:
        Use SANGLE:       ${use_sangle}
        Use Const-Q:      ${use_const_q}
        Fit peak in roi:  ${fit_peak_in_roi}
        Huber X cut:      ${direct_huber_cut}
        Use bck ROI:      ${use_roi_bck}
        Force peak:       ${force_peak} [${peak_min}, ${peak_max}]
        Force background: ${force_background} [${bck_min}, ${bck_max}]
        Use side bck:     ${use_side_bck}
        Bck width:        ${bck_width}

    Not used yet:
        Const-Q cutoff:   ${const_q_cutoff}
    """

    event_file_path=sys.argv[1]
    event_file = os.path.split(event_file_path)[-1]
    outdir=sys.argv[2]
    # The legacy format is REF_L_xyz_event.nxs
    # The new format is REF_L_xyz.nxs.h5
    run_number = event_file.split('_')[2]
    run_number = run_number.replace('.nxs.h5', '')
    red = refm.ReductionProcess(data_run=event_file_path,
                                output_dir=outdir,
                                use_sangle=${use_sangle},
                                const_q_binning=${use_const_q},
                                huber_x_cut=${direct_huber_cut},
                                const_q_cutoff=${const_q_cutoff},
                                update_peak_range=${fit_peak_in_roi},
                                use_roi_bck=${use_roi_bck},
                                force_peak_roi=${force_peak}, peak_roi=[${peak_min}, ${peak_max}],
                                force_bck_roi=${force_background}, bck_roi=[${bck_min}, ${bck_max}],
                                use_tight_bck=${use_side_bck}, bck_offset=${bck_width})
    red.reduce()

    # Translate event data to legacy QuickNXS-compatible files.
    if event_file_path.endswith('.h5'):
        mr_translate.translate(event_file_path, histo=False)
